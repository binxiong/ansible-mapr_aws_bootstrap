#!/usr/bin/env python

import argparse
import json


def ansible_inventory():
    hostvars = {
{% if ec2_cluster is defined %}
    {%- for result in ec2_cluster.results %}
        {%- for instance in result.tagged_instances %}
          "{{instance.private_ip}}": { "instance_id": "{{instance.id}}" },
        {% endfor %}
    {% endfor %}
{% endif %}
{% if external is defined %}
    {%- for result in external.results %}
        {%- for instance in result.tagged_instances %}
          "{{instance.private_ip}}": { "instance_id": "{{instance.id}}" },
        {% endfor %}
    {% endfor %}
{% endif %}
        }

    cluster = [
{% if ec2_cluster is defined %}
    {%- for result in ec2_cluster.results %}
        {%- for instance in result.tagged_instances %}
          "{{instance.private_ip}}",
        {% endfor %}
    {% endfor %}
{% endif %}
      ]

    edge = [
{% if external is defined %}
    {%- for result in external.results %}
        {%- for instance in result.tagged_instances %}
          "{{instance.private_ip}}",
        {% endfor %}
    {% endfor %}
{% endif %}
      ]

    mesos_master_candidates = [ node for node in cluster if node not in cluster[0:3] ]
    if len(mesos_master_candidates) >= 3:
      mesos_masters = mesos_master_candidates[0:3]
    else:
      mesos_masters = mesos_master_candidates[0:1]
    mesos_agents = [ node for node in cluster if node not in mesos_masters ]

    # Use python list slicing to define the hosts.
    # cluster[1:2] gives a list with one element, since slicing
    # is exclusive of the last index (e.g., [1:2] == [1])
    SERVICE_MAP = {
            "_meta" : {
                   "hostvars" : hostvars
            },

            "cldb": cluster[0:3],
            "cluster": cluster,
            "drill": cluster,
            "edge": edge,
            "dcos-bootstrap": edge,
            "elasticsearch": cluster[0:3],
            "fileserver": cluster,
            "hbasemaster": cluster[0:2],
            "historyserver": cluster[0:1],
            "hiveserver": cluster[0:2],
            "hue": cluster[0:2],
            "impalacatalog": cluster[0:2],
            "impalaserver": cluster,
            "impalastatestore": cluster[0:2],
            "jobtracker": cluster[0:2],
            "kafka": cluster[0:3],
            "mesos-master": mesos_masters,
            "mesos-agent": mesos_agents,
            "dcos-cluster": mesos_masters + mesos_agents,
            "metrics": cluster[0:2],
            "nfs": cluster,
            "nodemanager": cluster,
            "oozie": cluster[0:2],
            "opentsdb": cluster[0:2],
            "regionserver": cluster,
            "resourcemanager": cluster[0:2],
            "solr": cluster,
            "spark_master": cluster[0:1],
            "spark_slave": cluster,
            "tasktracker": cluster,
            "webserver": cluster[0:2],
            "zookeeper": cluster[0:3]
        }

    return SERVICE_MAP


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--list", action="store_true", help="display inventory")
    parser.add_argument("--host", action="store_true", help="host vars")

    args = parser.parse_args()
    if args.host:
        print json.dumps(dict())
    else:
        inventory = ansible_inventory()
        print json.dumps(inventory, indent=2, sort_keys=True)

if __name__ == "__main__": main()
